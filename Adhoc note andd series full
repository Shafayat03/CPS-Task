    /**
         1. 1-D Prefix Sums
         2. Difference Arrray
         3. 2-D prefix sum
         4. Find the sum of all subarray of an array
         5.Premutation
         6. A Score of set the difference between  its maximum
         value and minimum value. Find the sum of scores over all
         subarrays



    */


    /**
          Prefix Sum:

          n = 5
          index : 0 1 2 3 4
          value: 2 6 1 5 10
          prefix:2  6 7 12 22

          complexity : o(N)
          Query :
                    range :
                    1 3 = 10
                    2 4 = 16
                    1 5 = 22

                    l r = prefix[r] - prefix[l-1]
                    2 4 = 22 - 6 = 16

                    0 4 = prefix[r]

                    if(l == 0) ans = prefix[r]
                        karon -1 kono index nai array te
    */





#include<bits/stdc++.h>
using namespace std;
int main()
{
    int n;
    cin>>n;
    int ar[n+1];
    for(int i=0;i<n;i++)cin>>ar[i];

    int pre[n+1];
    pre[0]=ar[0];

    for(int i=1;i<n;i++)
    {
        pre[i]=pre[i-1]+ar[i];
    }

    int q;
    cin>>q;
    while(q--)
    {
        int l,r;
        cin>>l>>r;
        if(l==0)cout<<pre[r]<<endl;
        else cout<<pre[r]-pre[l-1]<<endl;
    }
}





/// Spoj cumalitive sum query :




    /**
         1. 1-D Prefix Sums
         2. Difference Arrray
         3. 2-D prefix sum
         4. Find the sum of all subarray of an array
         5.Premutation
         6. A Score of set the difference between  its maximum
         value and minimum value. Find the sum of scores over all
         subarrays



    */


    /**
          Prefix Sum:

          n = 5
          index : 0 1 2 3 4
          value: 2 6 1 5 10
          prefix:2  6 7 12 22

          complexity : o(N)
          Query :
                    range :
                    1 3 = 10
                    2 4 = 16
                    1 5 = 22

                    l r = prefix[r] - prefix[l-1]
                    2 4 = 22 - 6 = 16

                    0 4 = prefix[r]

                    if(l == 0) ans = prefix[r]
                        karon -1 kono index nai array te
    */


   /// Difference Array techniques / range based sum queries techniques

/**

     n = 7
     index: 0 1 2 3 4 5 6
     arr =  2 3 4 5 6 7 8
     
     query = 3
             l  r  value
        case 1 : 0 3 2 (o theke 3 index porjonto every value r sathe 2 add korbo bar bar)   
        output :  4 5 6 7 6 7 8 
        case 2 : 1 5 1
        output : 4 6 7 8 7 8 8 
       
       case 3 : 4 6 3
       output:  4  6 7 8 10 11 11
       
     akta array dewa thakbe akta 
     akta range l & r dewa thakbe r akta value dewa thakbe 
     protibar e value tah oi range l &  r   er sathe add korte hobe
       
       
       Technique:
       
       dif[n+1] = {0};
       
       dif = 2 1 0 0 1 0 -1 -3
       
       query = 3{
       
        dif[l] += v;
        dif[r+1] -= v;
       }
               dif[] =   2 1 0 0 1 0 -1 -3
     
       prefix_diff[] =   2 3 3  3 4 4 3 0
       
       arr[]         =   2 3 4 5 6 7 8
       
     ____________________________________
     prefix_diff + arr[] = 4 6 7 8 10 11 11
      
       
       
       
     process:
     1. fist e diff array te 0 initializee korbo'
     2. while loop chalabo query porjonto
     3. operation : diff[l] += v;
     4.  ||       : diff[r+1 -= v;
     5.  diff array prefix sum ber korbo
     6.  array + prefixsum_of _diff array jtah ber korci setah add korbo
       
       
         
*/



#include<bits/stdc++.h>
using namespace std;
int main()
{
    int n;
    cin>>n;
    int ar[n+1];
    for(int i=0;i<n;i++)cin>>ar[i];

    int dif[n+2]={0};

    int q;
    cin>>q;
///query input  
while(q--)
    {
        int l,r,v;            ///input : l, r and value
        cin>>l>>r>>v;
        dif[l]+=v;          
        dif[r+1]-=v;
    }
  /// making prefix sum of diff array
    for(int i=1;i<n;i++)dif[i]+=dif[i-1];

/// adding  prefix of diff array and initial array 

for(int i=0;i<n;i++)ar[i]+=dif[i];

    for(int i=0;i<n;i++)cout<<ar[i]<<" ";
    cout<<endl;

}






/// 2-D prefix sum

/**
        Technique:
        1. first row er prefix sum ber kore fela
        2. first column er prefix sum ber kore fela
        3.formuala use : prefix[i][j] = prefix[i][j-1] + prefix[i-1][j] + arr[i][j] - prefix[i-1][j-1]
        

*/



#include<bits/stdc++.h>
using  namespace  std;
int main()
{
    int n,m;
    cin>>n>>m;
    int ar[n][m];
    for(int i=0;i<n;i++)
    {
        for(int j=0;j<m;j++)
        {
            cin>>ar[i][j];
        }
    }

    int pre[n][m];
    pre[0][0]=ar[0][0];

///prefix sum of row

for(int i=1;i<m;i++)pre[0][i]=pre[0][i-1]+ar[0][i];

///prefix sum of column

for(int i=1;i<n;i++)pre[i][0]=pre[i-1][0]+ar[i][0];

    for(int i=1;i<n;i++)
    {
        for(int j=1;j<m;j++)
        {
                /// formula use 

            pre[i][j]=pre[i][j-1]+pre[i-1][j]+ar[i][j]-pre[i-1][j-1];
        }
    }

/// print the prefix array
    for(int i=0;i<n;i++)
    {
        for(int j=0;j<m;j++)cout<<pre[i][j]<<" ";
        cout<<endl;
    }

}



/// Check if a * b  is greater than 10^18 avoiding  integer overflow




#include <bits/stdc++.h>
using namespace std;


int main()
{
    longl  long int a,b;
    cin >> a >> b;
    long long int p = 10e18;
    long long int c = p / a;


  if(b > c) cout << "Big" << endl;
  else cout << "Small" << endl;


    return 0;
}


B. Muliplication atcoder problem :


#include<bits/stdc++.h>
using namespace std;
int main()
{
	long long int n,i,j,ans=1,z=0;
	cin>>n;
	long long int a[n];
	for(i=0;i<n;i++)
	{
		cin>>a[i];
		if(a[i]==0)z=1;
	}
	if(z==1)cout<<"0"<<endl;
	else {
		for(i=0;i<n;i++)
		{
			if(ans<=1000000000000000000/a[i])
			{
				ans=ans*a[i];
			}
			else{
				ans=-1;
				break;
			}
		}
		cout<<ans<<endl;
	}
	return 0;
}


/// Sum of all sub-arrayv of an array 
/**
technique : 
kono akta value kotaobar ace oitah ber korar formula :    i = i * (n - i+1);

**/
#include<bits/stdc++.h>
using  namespace  std;
int solve(int ar[],int n)
{
    int sum=0;
    for(int i=1;i<=n;i++)
    {
        sum+=(i*(n-i+1))*ar[i];
    }
    return sum;
}
int main()
{
    int t;
    cin>>t;
    while(t--)
    {
        int n;
        cin>>n;
        int ar[n+4];
        for(int i=1;i<=n;i++)cin>>ar[i];
        cout<<solve(ar,n)<<endl;
    }
    return 0;
}


/// koita permutation   asee   ber kora 

kotogula permutation ready kora shombov arrray othoba string er , dui tah string er permutation er value r compare, 
vector er permutation koita countkora evabe ashe question

/// string er permutation

#include<bits/stdc++.h>
using namespace std;

int main()
{ 
string s;
cin >> s;
sort(s.begin(),s.end())
while(next_permutation(s.begin(), s.end())){

cout << s << endl;
}






//                        Permutaion:
//                    ------------------

#include<bits/stdc++.h>
using  namespace  std;

void print(vector<int>&v,int n)
{
    for(int i=0;i<n;i++)cout<<v[i]<<" ";
    cout<<endl;
}

int main()
{
   vector<int>v;
   int n;
   cin>>n;
   int x;
   for(int i=0;i<n;i++)
   {
       cin>>x;
       v.push_back(x);
   }
   
   while(next_permutation(v.begin(),v.end()))
   {
       print(v,n);
   }
}

