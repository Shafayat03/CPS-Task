#include<bits/stdc++.h>
using namespace std;

typedef long long ll;
typedef double dl;
typedef vector<int>vi;
typedef vector<int,int>pi;
#define F first
#define S second
#define PB push_back
#define MP make_pair
#define endl "\n"
#define REP(i,a,b) for(int i = a; i <= b; i++)
#define SQ(a) (a)*(a)
#define optimize() ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
#define fraction() cout.unsetf(ios::floatfield); cout.precision(10); cout.setf(ios::fixed,ios::floatfield);

int main()
{
    optimize();

    /// in some contests files ares used as input and output so use this
     /*
    freopen("input.txt","r",stdin);
    freopen("output.txt","w",stdout);
*/



/*
    int a,b;
    cin>>a>>b;

    string s = "monkey";

    cout<< a << "  "<<b<<endl;
    cout<< s<<endl;

*/

/// use getline for multiple character input in one line in string---> getline(cin, variable name);

  /*
    string s2 ;
    getline(cin, s2);
    cout<<s2 <<endl;

    return 0;
}
*/


/// for unknown data  amount use this loop contains all available data until it finish

/**
            while(cin >> x){

                //code segment
            }

*/

/*
int x;
while(cin>>x){
    int a,b;
    cin>>a>>b;

    long long c = a*b +( a- b)+ (a/b);

    cout<<c<<endl;
}
}
*/



/// working with numbers


//modular arithmatic
/*
long long n,m;
long long x = 1;
for(int i = 2; i <= n;i++){

   x = x%m;

   if(x < 0) x += m;
cout<< x << endl;
}
}

*/

/// for float compare use  this condition  if    ----->      (abs(value) < 1e-9)
/*
double x = 0.3*3+0.1;
int a,b;
cin>>a>>b;
 if(abs(a-b) < 1e-9)

printf("%.20lf\n",x);
*/
/// shortcut code

/*
vi.PB(MP(y1,x1));
vi.PB(MP(y2,x2));
int d = v[i].F+v[i].S;

*/


// cout<<SQ(3+3) << endl; //36

///Mathematics

/// arithmetic progression --->  ( somantor progoti/ somanthor dhara)
     
     /**
                       n(a + b)
           a+....+b  = --------
                           2
         here , 
          n = (number)  podhosonkha 
          a = prothom pod
          b = sesh pod
          
     */

// also called --> faulhaber's formula


/// Geometric progression---> ( Gononthor progoti / Gonothor Dhara)

     /**                                 bk - a
              a + ak + ak^2 +... + b =  -------
                                          k - 1
                                          here, k --->  general  ratio (sadaron onopat) 
     */



/// Harmonic Sum ---> ONOK-KROM

   /// UPPER BOUND IS ---> log2(n) + 1
































































}
