/// All string problems



/// string inpuut and output
#include<stdio.h>
int main()
{
    char s[123];

    for(int i = 0; i < 3; i++){
        scanf("%c",&s[i]);
    }

    for(int i = 0; i < 3; i++){
        printf("%c",s[i]);
    }


  return 0;
}


/// string inpuut and output  with n 
#include<stdio.h>
int main()
{
    char s[123];
     int n;
     scanf("%d",&n);
    for(int i = 0; i < n; i++){
        scanf(" %c",&s[i]);
        /// akta space dite hobe input newar somoy na hoi vul output dibe 
    }

    for(int i = 0; i < n; i++){
        printf("%c",s[i]);
    }


  return 0;
}


/// string inpuut and output  without size---> (Static)
//size bolte na hole dynamic---> vector(dynamic)
///string ---> sequencial array
#include<stdio.h>

int main()
{
    char s[123];
    scanf("%s", s); // eta akta pointer ---> array without index is a  pointer
    printf("%s",s);

  return 0;
}


/// pointer e kicu na thakle output---> Null 

#include<stdio.h>

int main()
{
    char s[123];
   // scanf("%s", s); // eta akta pointer ---> array without index is a  pointer
    int a = (s[3] == '\0');
    /// string e kicu nai bujate null output dei '\0'

    printf("%s",a);

  return 0;
}


/// string er length output


#include<stdio.h>

int main()
{
    char s[123];
    scanf("%s", s); // eta akta pointer ---> array without index is a  pointer
    int i = 0;
    while(s[i] != '\0'){
       printf("%d : %c\n",i,s[i]);
        i++;
    };
    /// string e kicu nai bujate null output dei '\0'

    printf("%d",i);

  return 0;
}

/// string er length increament kora

#include<stdio.h>
int main()
{
    char s[123];
    scanf("%s", s); // eta akta pointer ---> array without index is a  pointer
    int len = 0;
    while(s[len] != '\0'){
       printf("%d : %c\n",len,s[len]);
        len++;
    };
    /// string e kicu nai bujate null output dei '\0'

  // length er value 1 kore baranor jonno use
  for(int i = 0; i < len; i++){
    s[i]++;
  }

    printf("%s",s);

  return 0;
}

/// char to digit  &&  digit to char
#include<stdio.h>
int main()
{
    // char to digit conversion

    char c = '4';
    int digit = c - '0';

    printf("%d\n",digit);

    /// int to char ;
  /*
      int d = 2;
      char c = d + 'c';
      printf("%c", c);  //  2 
  
  */

  return 0;
}


// E.count
// print sum of digits string
#include<stdio.h>
const int mx = 1e6+123;
char s[mx];


int main()
{
    scanf("%s",s);
    
    int sum = 0;
    int i = 0;
    
    while( s[i] != 0 ){
        sum += (s[i] - '0' );  // null minus korle actuall digit peye jaboo 
        i++;
    } 
    printf("%d",sum);
    
    
    
  
  return 0;
}


/// char mapping

#include<stdio.h>
const int mx = 1e7+123;
char s[mx];
int cnt[30];

int main()
{
    /*
    //indexing
    int i = 'g' - 'a';
    printf("%d",i);
*/

  scanf("%s",s);

  int i = 0;
  while(s[i] != 0 ){
      int index = s[i] - 'a'; //indexing
      cnt[index]++;
      i++;
  }
  for(int i = 0; i < 26; i++){

      if( cnt[i] > 0){
          //vice-versa conversion
          char c = 'a' + i;
          printf("%c : %d\n",c,cnt[i]);

      }

  }







  return 0;
}


/// String reverse  algo



#include<stdio.h>
int main()
{
    // input string
    char s[123];
    scanf("%s",s);

 //   declare length
    int len = 0;

    while(s[len] != 0 ){
        len++;
    }

   // slide print korar jonno j i r j use  kori oi rokom pointer nici


    for(int i = 0, j  = len-1; i < j; i++,j--){
    ///  swaping the string
        char tmp = s[i];
        s[i] = s[j];
        s[j] = tmp;
    }

    printf("%s\n",s);


  return 0;
}




/// String Palindrome Algo

//--> reverse korar mirror e dekle   por same takle plindrome bole

// palindrome hobe --> every position e same char thakle



#include<stdio.h>
int main()
{
    char s[123],tmp[123];

    scanf("%s",s);

    // length calculate first

    int len = 0;

    while(s[len] != 0 ){
        //length copy temporary te
        tmp[len] =  s[len];
        len++;
    }

    // reverse a string
    for(int i = 0, j = len-1; i < j; i++,j--){

        char tmpChar = tmp[i];
        tmp[i] = tmp[j];
        tmp[j] =  tmpChar;

    }

    bool isEqual = true;

    //comparing s & tmp string

    for(int i = 0; i < len; i++){
        if(s[i] != tmp[i] ){
            isEqual = false;
            break;
        }
    }
 printf("s\n : ");
  for(int i = 0; i< len; i++) printf("%c ",s[i]);
   printf("tmp\n : ");
     for(int i = 0; i< len; i++) printf("%c",tmp[i]);

    if(isEqual ){
        printf("palindrome\n");
    }
    else{
        printf("Not Palindrome\n");
    }

  return 0;
}


/// 1 length index

//A. Reverse  problem  Atcoder

#include<stdio.h>

const int mx = 1e5 + 123;
char s[mx];

int main()
{
    int l,r;
    scanf("%d %d %s",&l,&r,&s);

    int len = 0;
    while(s[len] != 0) {
        len++;
    }

    for(int i = l-1, j = r-1; i < j; i++, j--){

        char tmp = s[i];
        s[i] = s[j];
        s[j] = tmp;



    }
    printf("%s", s);


  return 0;
}


/// pattern check in string


// H. Good or Bad

#include<stdio.h>

const int mx = 1e5 + 123;
char s[mx];

int main()
{
    int t;
    scanf("%d",&t);

    while(t--){
        scanf("%s",s);

      int len = 0;
      while(s[len] != 0){

           len++;

      }
      bool isGood = false;

      for(int i = 2; i < len; i++){

         char s1 = s[i-2]; //s1 = s[0]
         char s2 = s[i-1]; // s[2] = s[1]
         char s3 = s[i]; // s3 = s[2]

        if( s1 == '0' && s2 == '1' && s3 == '0'){ //010
            isGood = true;
            break;
        }
        else if(s1 == '1' && s2 == '0' && s3 == '1'){ //101
            isGood = true;
            break;
        }

      }

    (isGood) ? printf("Good\n") : printf("Bad\n");


    }


  return 0;
}

