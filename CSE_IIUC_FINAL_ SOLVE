

********* SPRING-23 *****************

1(a)

#include<stdio.h>
int main()
{
    for(int i = 1; i <= 4; i++){
        for(int j = 1; j <= 4; j+=2){
            if(i%2){
                printf("special = retake = fail\n");
            }
        }
    }

  return 0;
}
//output:
/*    
      special = retake = fail
      special = retake = fail
      special = retake = fail
      special = retake = fail

*/

(b)  Write a C program that reads a positive integer N and prints the following pattern for N rows.For  example, if N = 5, then the output would be:
   11111
   00000
   11111
   00000
   11111


OUTPUT:


#include <stdio.h>

int main() {
    int N;
    
    //input N
    scanf("%d", &N);
    
    // Check if N is positive
    if (N <= 0) {
        printf("N must be a positive integer.\n");
        return 1;  // Exit with an error code
    }
    
    // Loop for N rows
   
    for (int i = 1; i <= N; i++) {
        
        // Loop for each column in a row
       
        for (int j = 1; j <= N; j++) {
            
            // Print 1 if the row number is odd, 0 if even
            
            printf("%d", i % 2);
        }
        
        // Move to the next line after each row
       
        printf("\n");
    }
    
    return 0;  
}


(c)   Input consists of multiple lines, one line per case. Each line contains two positive integers. Your task is to find the Largest number between these two integers. Input is terminted by a line when  both integers are the same.
 Sample Input                                          Sample Output
2 5                                                    Largest = 5
7 6                                                    Largest = 7
1 70                                                   Largest = 70
3 3                                                    


OUTPUT:


#include <stdio.h>

int main() {
    int num1, num2;

    while (1) {
        
        // Read two positive integers
      
        scanf("%d %d", &num1, &num2);

        // Check if both integers are the same
      
        if (num1 == num2) {
            break;    // Exit the loop when both integers are the same
        }

       
        // Determine the largest number and print it
        
        if (num1 > num2) {
            printf("Largest = %d\n", num1);
        }
        else {
            printf("Largest = %d\n", num2);
        }
    }

    return 0;
}



                                         OR

You will give  T test cases . Each test case contains a non-negative integer N. For each test case, your task is to check whether N is prime or not . (A prime number is a natural number grater that 1 that is not a  product of two smaller natural numbers)
Sample Input                                              Sample Output
2                                                          
17                                                         Prime Number
27                                                        Not a prime Number




OUTPUT:




#include <stdio.h>
#include <stdbool.h>

// Function to check if a number is prime

bool isPrime(int n) {
    if (n <= 1) {
        return false;
    }
    for (int i = 2; i * i <= n; i++) {
        if (n % i == 0) {
            return false;
        }
    }
    return true;
}

int main() {
    int T, N;

    // Read the number of test cases
    
    printf("Enter the number of test cases (T): ");
   
    scanf("%d", &T);

    for (int i = 0; i < T; i++) {
        // Read the non-negative integer for each test case
        
      
        printf("Enter a non-negative integer (N) for test case %d: ", i + 1);
        
        scanf("%d", &N);

       
        // Check if N is prime and print the result
        
        if (isPrime(N)) {
            printf("Prime Number\n");
        }
        else {
            printf("Not a prime Number\n");
        }
    }

    return 0;
}



2(a)

#include <stdio.h>

int m=15;
int change(int n){
    m = m+10;
    return m;
}

int main()
{
    int m = 10;
    printf("%d",change(m));
   
    return 0;
}




output: 25



2(b)write a function that takes a positive integer and returns the summation of all the factors (Excluding the I and the number itself) of that number.
    Demonstrate your function in a complete program.for example if the input number is 10 then the output in 7


Solution: 


#include <stdio.h>

int sumOfFactors(int n) {
    int sum = 0;
    
    // Loop through numbers from 2 to n/2 to find factors
    for (int i = 2; i <= n / 2; i++) {
        if (n % i == 0) {
            sum += i;
        }
    }
    
    return sum;
}

int main() {
    int num;

    printf("Enter a positive integer: ");
    scanf("%d", &num);

    if (num <= 0) {
        printf("Please enter a positive integer.\n");
    } else {
        int result = sumOfFactors(num);
        printf("The summation of factors of %d (excluding 1 and itself) is: %d\n", num, result);
    }

    return 0;
}



 OR 

write an function that will pass an array through the arguments . Your task is to sort this array in ascending order and  return the array to the main function.
If the array is {6,5,2,9,1,3} , then sorting in ascending order, we find the array as {1,2,3,5,6,9}



Solution:

   #include <stdio.h>

   // Function to sort an array in ascending order using the Bubble Sort algorithm

  void bubbleSort(int arr[], int size) {
    int temp;
    for (int i = 0; i < size - 1; i++) {
        for (int j = 0; j < size - 1 - i; j++) {
            if (arr[j] > arr[j + 1]) {
                // Swap elements if they are in the wrong order
                temp = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = temp;
            }
        }
    }
}

int main() {
    int arr[] = {6, 5, 2, 9, 1, 3};
    int size = sizeof(arr) / sizeof(arr[0]);

    // Call the bubbleSort function to sort the array
    bubbleSort(arr, size);

    // Print the sorted array
    printf("Sorted array in ascending order: ");
    for (int i = 0; i < size; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");

    return 0;
}


2(c) 
#include<stdio.h>

 int fun(int n)
 {
     int f;
     if(n <= 1)return 1;
     if(n%2==0) return f(n/2);
     return f(n/2)+f(n/2+1);
 }


int main()
{
    
    int n = 11 + (3 % 2);
    printf("%d",func(11));
    
    return 0;
}

solution: 




















/// 4). Given two numbers N and M. a 2D array of size N*M and a number x. determine whether X exists in the 2D array A or Not

/// S. search in matrix in codeforces
#include<stdio.h>
int main()
{
    int i , j, n, m, x, a[100][100],f=0;

    scanf("%d %d",&n,&m);

    for(i = 0; i < n; i++){
        for(j = 0; j < m; j++){
            scanf("%d",&a[i][j]);
        }
    }
    scanf("%d",&x);

    for(i = 0; i < n; i++){
        for(j =0; j < m; j++){
            if(x==a[i][j]){
                f = 1;
            }
        }
    }

    if(f==0){
        printf("No\n");
    }
    else{
        printf("Yes\n");
    }









  return 0;
}



/// another solve of this quesion 


/// 4). Given two numbers N and M. a 2D array of size N*M and a number x. determine whether X exists in the 2D array A or Not





#include<stdio.h>

const int mx = 123;
int a[mx][mx];


int main()
{
    int n,m;
    scanf("%d %d", &n, &m);

    for(int i = 0; i< n; i++){
        for(int j = 0; j < m; j++) scanf("%d",&a[i][j]);
    }

    int x;
    scanf("%d", &x);

    bool isExists = false;

    for(int i = 0; i < n; i++ ){
        for(int j = 0; j < m; j++){
            if(a[i][j] == x ){
                isExists = true;
                break;
            }
        }
        if(isExists) break;

    }
    if(isExists) printf("will not take number\n");
    else printf("will take number\n");

  return 0;
}



4.c) Given a string S. Print the summation of its digits.


// E.count
// print sum of digits string
#include<stdio.h>
const int mx = 1e6+123;
char s[mx];


int main()
{
    scanf("%s",s);

    int sum = 0;
    int i = 0;

    while( s[i] != 0 ){
        sum += (s[i] - '0' );  // null minus korle actuall digit peye jaboo
        i++;
    }
    printf("%d",sum);




  return 0;
}




    OR


/// Given a string . Your task is to count the vowels in the string.


#include<stdio.h>
#include<string.h>
int main()
{

    char s1[100];

    gets(s1);

    int i;
    int f = 0;
    int count = 0;
    for( i = 0; i < s1[i] != '\0'; i++){
        if(s1[i]=='a' || s1[i]=='e' || s1[i]=='i' || s1[i]=='o' || s1[i]=='u'|| s1[i]=='A'|| s1[i]=='E'|| s1[i]=='I'|| s1[i]=='O'|| s1[i]=='U'){
            f = 1;
            count++;
        }
    }

        printf("Vowel : %d\n",count);


  return 0;
}





///5.a) take and array of n elements. print the array in reverse using pointer in c





#include<stdio.h>
int main()
{
    int n;
    scanf("%d",&n);


    int a[100123];

    int *ptr,i;

    ///initialize pointer --> pointer = a[0]
    
  ptr = &a[0];
    for(i = 0; i < n; i++){
        scanf("%d",ptr+i);
    }

    /// pointer + index ---> address
    /// *(pointer + index) ---> print the value of this address
    for(i = n-1; i >=0; i--)
    {
        printf("%d ",*(ptr+i));
       // ptr++;


    }
    getch();
  return 0;
}





5.(b)
/*
Ques:
suppose we have  a list of students names, ID Numbers and Cgpa. suppose there are range of cgpa from 1.00 -4.00( interval between two consecutive cgpa in 0.25). 
Write a C programme that will perform the following tasks : take the above data as input and put it into an array of structure.
The numbers of students N will also be in input to your programm first . Define your own structure. Assume that the names are single word names with max length of 20.
The program should print out an ordered list of students and cgpa. i.e students with 4.00 cgpa should be listed first, students with 3.75 grade next and so forth 

input:                                                                                         output:

3
Ema   C201232   3.75                                                     Khaleda  C201225  4.00
Sanzana  C201237  3.00                                                   Ema   C201232   3.75 
Khaleda  C201225  4.00                                                   Sanzana  C201237  3.00     


*/


#include <stdio.h>
#include <string.h>

struct Student {
    char name[21];
    char id[9];
    float cgpa;
};

void insertionSort(struct Student arr[], int n) {
    int i, j;
    struct Student key;
    for (i = 1; i < n; i++) {
        key = arr[i];
        j = i - 1;

        while (j >= 0 && arr[j].cgpa < key.cgpa) {
            arr[j + 1] = arr[j];
            j = j - 1;
        }
        arr[j + 1] = key;
    }
}

int main() {
    int n;
    printf("Enter the number of students: ");
    scanf("%d", &n);

    struct Student students[n];

    for (int i = 0; i < n; i++) {
        printf("Enter the name, ID, and CGPA for student %d: ", i + 1);
        scanf("%s %s %f", students[i].name, students[i].id, &students[i].cgpa);
    }

    insertionSort(students, n);

    printf("Ordered list of students and CGPA:\n");
    for (int i = 0; i < n; i++) {
        printf("%s %s %.2f\n", students[i].name, students[i].id, students[i].cgpa);
    }

    return 0;
}
