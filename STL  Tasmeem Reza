#include<bits/stdc++.h>
using namespace std;
int main()
{
    /// array k onek somoy pointer bola hoi

     /// a[]  always  passes the memory location of a[0]

    int a[] = {3,4,5,6};
    cout << a << endl;  ///0x61ff00( address tah return kore)

    cout << *a << endl;   /// 3      /// array er first index return kore
    cout << *(a + 1); /// 4  /// array er second index return kore



   /// arraay declare in c++ new using

   int *b = new int [10];
   for(int i = 0;i < 10; i++){
    b[i] = i;
   }

   for(int i = 0;i < 10 ; i++){
    cout << b[i] << endl;     /// 0 1  2 3 4 5 6 7 8 9
   }



/// evabe size resize kora jabe


b = new int [20]; /// ekane n diye o n input niye o amra erokom assign and declare kore resize korte pari


for(int i = 0;i < 20; i++){
    b[i] = i;
}

for(int i = 0;i < 20; i++){
    cout << b[i] << endl;
}


/// ekabe o array pointer diye output dewa jai --

/// sort(a, a + n ) --> ekan e  a 0 index k point kortece r n nth pointer k point kortece


int x[] = {10,20,30,40,50};

/// evabe amra array iterate korte pari but eta vlo practice na onek jaigay problem kore
for(int *i = x; i != x + 5; i++){
    cout << *i  << " ";
}
cout << endl;





/// lambda function --> function k variable er moto treat kora


 auto func = [] (int i, int j){
   return i + j;

 };
 cout << func(10,20) << endl;  /// 30



 /// lambda function k recursive function hisebe use korte chaile

   function<int(int)> fib = [&fib] (int i){

    if(i <= 1) return 1;
    return fib(i - 1) + fib(i - 2);

   };

   for(int i = 0;i < 10; i++){
    cout << fib(i) << endl;       /// 1 1 2 3 5 8 .... 55
   }




   /// reverse sort using lambda function


   int y[] = {1,2,3,4,5};

   sort(y, y+5, [] (int i, int j){

     return i > j;
   });


   for(int i  = 0; i < 5;  i++){
    cout << y[i] << endl;   /// 5 4 3 2 1 
    }



    /***********   STL  Part ****************\




                    <<**vector**<<


  /// vector  --> resiable array

    vector<int> v;


    ///initially v = []

   v.push_back(10); // v = v[10];

   //

   v.push_back(20); ///v = v[10,20];

   v.push_back(30); /// v = v[10,20,30];


   cout << v[0] << " " << v[1] << " " << v[1] << endl;  /// 10, 20, 30


///   v.rersize() ---->  dile vector  resize hoye jai



/// vector of pair  push_back

  vector<pair<int,int>> v;

/// push_back  r   emplace_back()  same kaj kore






/// emplace_back()  --->  constructor ready korte hoi

v.emplace_back(2,3); /// eta fast kaj kore



/// v.push_back() korle ---> make_pair() use korte hoi

v.push_back(make_pair(2,3));

/// nije theke akta pair construcct kore tai push_back()  slow kaj kore



/// vector iterator

for(auto i : v){
    cout << i << endl; /// vector er value gula i e store hoye jai 
    
}

/// ampersent use korle --> vector er j kono value k change korte parbo range based for loop e

for(auto &i : v){ /// ampersent reference return kore
        
    i += 1;
   cout << i << endl; 
}

/// lower_bound() --> sorted vector er value khuje paite help kore


/// size_t --> unsigned int c++ joto size ace eta return kore always


// unsigned e negative number handle kora jai nah




    vector<int>v;
                /// evabe o print kora jai 
    for(int i= 0; i < (int)v.size() - 1; i++){
        cout << v[i] << endl; /// kicuy print korbe nah bcz sizee zero akan 
    }
    
    /// try korbo always range based for loop use korar --bcz -- eta te size() kono matter kore nah
    
    
    /// zero output dibe bcz ami function e variable tah pass
    /// korci tokon variable tar akta copy pass hoice tai
    
    void foo(int i){
    
       i += 1;
    }
    
    int main()
    {
        int var = 0;
        foo(var);
        foo(var);
        
        cout << var << endl; /// 0 
    
    }



 /// Pass by referenence 
   
    void foo(int &i){   /// & sign dile variable nije pass hobe (address tah pass kore dei)
    
       i += 1;  /// i = 0 + 1;
    }
    
    int main()
    {
        int var = 0;
        foo(var); /// 1
        foo(var);  /// 1  
        
        cout << var << endl; /// 2 
    
    }





     /// Stack --> sobcheye notun jinish tah sobar upor e rakha  ebong sobcheye poraton jinish tah sobar niche rakha

     ///  LIFO ---> last in first out
     /// FIFO -->  first in first out


     stack < int > s;


    s.push(10); /// s = [10];
    s.push(20); /// s = [10,20];
    s.push(30); ///[10,20,30];

    cout << s.top() << endl; /// sobar upor er element tah print korbe 30 output (LIFO)

    s.pop(); /// s = [10,20];
    ///s.pop() last element tah delete kore dei
    cout << s.top() << endl; /// 20 output dekhabe

   /// s.size --> rize return kroe
   /// s.empty ---> emptu hole true return kor e r empty na hole false return kore


  /// vector r stack  pray same  (vector diiye stack er sob kaj kora jjai)


/// stacck akta linklist

/// vector stack theke powerful


/// stack iterate korar jonno

/// stack iterate korar por loop theke ber hoi jai 
while(not s.empty())
{

    cout << s.top() << endl;  /// 30 20 10 

    s.pop();
}























    return 0;
}
