#include<bits/stdc++.h>

#define endl '\n'

using namespace std;
const int N = 1e7 + 10;
/// for sieve
vector<bool>isPrime(N,1);




int main()
{

   /// prime  Check

   ///Bruteforce--->> complexity >>  o(n)

/*
   int n;
   cin >> n;
   bool is_prime = true;

   for(int  i = 2; i < n; ++i)
   {

       if(n % i == 0){
         is_prime = false;
         break;
       }
   }

   cout << is_prime << endl;


*/








   ///complexity >> O(sqrt(n))

  /*

   int n;
   cin >> n;
   bool is_prime = true;

   /// we have to handle n == 1 for this casee
   if(n == 1){
    cout << 0 << endl;
    return ;
   }

   for(int  i = 2; i*i <= n; ++i)
   {

       if(n % i == 0){
         is_prime = false;
         break;
       }
   }

   cout << is_prime << endl;


  */

  /// Prime Factorization  --->  kono number er 1 na asha porjonto koto gula prime number pabo sob jenerate kora

  /**
  input:           ouptput:

  36               2 2 3 3

  */

    ///complexity >> O(sqrt(N))

    /**

    int n;
    cin >> n;

    vector<int>prime_factors(n);

    for(int i = 2; i  * i <= n; ++i)
    {
        while(n % i == 0){
            prime_factors.push_back(i);
        n /= i;
        }

    }
    if(n > 1){
        cout << prime_factors.push_back(n);
    }


    for(int  prime : prime_factors){
        cout << prime << " ";
    }



*/





     ///complexity >> O (N * long(LgN))

/*
     isPrime[0] = isPrime[1] = false;

     for(int i = 2; i < N; ++i){
        if(isPrime[i] == true)
        {
            /// count the multiple of ith number and false for those number
            
            for(int j = 2 * i; j < N; j++){
                isPrime[j] = false;
            }
        }
     }
     int q;
     cin >> q;
     while(q--)
     {
         int num;
         cin >> num;
         if(isPrime[num]){
            cout << "Prime" << endl;
         }
         else {
            cout << "Not Prime" << endl;
         }
     }
*/



       ///complexity >>
       
        isPrime[0] = isPrime[1] = false;

     for(int i = 2; i < N; ++i){
        if(isPrime[i] == true)
        {
            /// count the multiple of ith number and false for those number
            lp[i] = hp[i] = i;/// karon kono number er prime factor se nijey
            
            for(int j = 2 * i; j < N; j++){
                isPrime[j] = false;
                hp[j] = i;
                if(lp[i] == 0){
                    lp[i] = i;
                }
            }
        }
     }
     /// jodi lp o hp print korte chay  
    //cout << lp[j] << " " << hp[j] << endl;
       
    /// prime factor ber korte hole
    /*
    
    int num;
    cin >> num;
    vector<int> prime_factors;
    
    while(num > 1){
        int prime_factors = hp[num];/// ekan e hp othoba lp j kono akta use kora jabe
        while(num % prime_factor == 0){
            
            num /= prime_factors;
            prime_factors.push_back(prime_factor);
            
        }
    }  
      */
    
    /// Prime Factors counting in map
    /**
    
    map<int,int> prime_factors;
       while(num > 1){
        int prime_factors = hp[num];/// ekan e hp othoba lp j kono akta use kora jabe
        while(num % prime_factor == 0){
            
            num /= prime_factors;
     //       prime_factors.push_back(prime_factor);
       
           prime_factors[prime_factor]++;     
        }
    } 
       
       for(auto factor : prime_factors){
        cout << factor.first << " " << factor.second;
       }
       */
       
        /// divisor countding using seive
        
        vector<int> divisors[N];
        
        for(int i = 2; i < n; ++i)
        {
            for(int j = i; j < N; j += i)
            {
                divisors[j].push_back(i);
            }
        }
        
        for(int  i = 1; i < 10; ++i)
        {
            for(int div : divisors[i]){
                cout << div << " ";
            }
            cout << endl;
        }
        
        




           ///InBuild Sort STL c++ ( inbuild --->>  insertion + heap + quick ) sort er mixture


         ///complexity >> Nlg(N)

         /*

         int n;
         cin >> n;

         int a[n]; /// vector<int>v(n)

         for(int i = 0;i < n; ++i){
            cin >> a[i];
         }

         sort(a, a+n); /// (v.begin(), v.end())
          for(int i = 0;i < n; ++i){
           cout << a[i] << "  " ;
         }
         cout << endl;

*/


     /// Comparator Function

     /**

         bool comp(int a,int b){

             if(a > b ) return true;
                return false;
         }

     */



       /// modular arithmetics


       /// n % m ber korte hobe j kan e n er range onek beshi


      /// big mod -->>  string e input niye every character wise access korbo the n divisibily check korbo
      /*
          int t;
          cin >> t;
          while(t--){
          string s;
          cin >> s;
          int m;
          cin >> m;
          int ans = 0;

          for(int i = 0;i < s.size(); i++)
          {
              ans = ans * 10 + (s[i] - '0');
              ans = ans % m;
          }

          if(ans % m == 0) cout << "YES" << endl;
          else cout << "NO"<<endl;


          }
*/








         ///complexity >>
          ///complexity >>
          ///complexity >>
           ///complexity >>
           ///complexity >>
            ///complexity >>
              ///complexity >>
               ///complexity >>
                 ///complexity >>
                  ///complexity >>
                  ///complexity >>
                   ///complexity >>
                    ///complexity >>



    return 0;
}
